java多线程:

一、在java中要想实现多线程，有两种手段，(其实准确来讲，应该有三种，还有一种是实现Callable接口，并与Future、线程池结合使用)
   第一种是继续Thread类.
		public class MyThread extends Thread{
		@Override    //重写run()方法
		public void run() {		
				for(int i=0;i<100;i++) {
					String ThreadName=Thread.currentThread().getName();
					System.out.println(ThreadName+":"+i);		
			}
		}
			
		public static void main(String[] args) {
			MyThread mt=new MyThread();
			mt.start();
			MyThread mt1=new MyThread();
			mt1.start();	
		}
	}
	
	第二种是实现Runable接口.
		public class MyRunnable implements Runnable {
			int count = 100;//共享变量
			//重写run()方法
			public void run() {
				synchronized (this) {
					while(count>0) {
						try {
							Thread.sleep(100);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						System.out.println(Thread.currentThread().getName()+":"+count--);
					}
				}		
			}
			public static void main(String[] args) {
				//创建线程类，代理对象(静态代理)，用构造函数构造出Thread对象，然后调用Thread类的start()方法
				MyRunnable mr = new MyRunnable();			
				Thread t1 = new Thread(mr);
				Thread t2 = new Thread(mr);
				t1.start();
				t2.start();
			}
		}
		
	注意:在源码中，该实现方式有一个变量 private Runnable target;	只有在变量target！=null时 调用run()方法
		 public void run() {
	        if (target != null) {
	            target.run();
	        }
	    }
	说明:
		MyRunnable类通过实现Runnable接口，使得该类有了多线程类的特征。run()方法是多线程程序的一个约定。
所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。
        在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread对象的start()方法
来运行多线程代码。实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现
多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础。

二、为什么要在实现多线程的时候重写run(方法)
	因为不是类中的所有代码都要被线程执行的，为类区分哪些代码需要被线程执行，java提供Thread类中的run()方法
来包含那些要被线程执行的代码

三、run()方法和start()方法的区别
	run：run()方法只是类的一个普通方法而已，如果直接调用run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，
还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。

    start：用start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体代码执行完毕而直接继续执行下面的代码。
通过调用Thread类的start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，
这里方法 run()称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。

    总结：调用start方法方可启动线程，而run方法只是thread的一个普通方法调用，还是在主线程里执行。这两个方法应该都比较熟悉，
把需要并行处理的代码放在run()方法中，start()方法启动线程将自动调用 run()方法，这是由jvm的内存机制规定的。并且run()方法必须
是public访问权限，返回值类型为void。

四、Thread和Runnable的区别
	如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。
	总结：
	实现Runnable接口比继承Thread类所具有的优势：
		1）：适合多个相同的程序代码的线程去处理同一个资源
		2）：可以避免java中的单继承的限制
		3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立
		4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类
提醒一下大家：main方法其实也是一个线程。在java中所以的线程都是同时启动的，至于什么时候，哪个先执行，完全看谁先得到CPU的资源。
在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动
一个jvm，每一个jvm实习在就是在操作系统中启动了一个进程。

五、线程状态转换
下面的这个图非常重要！你如果看懂了这个图，那么对于多线程的理解将会更加深刻！
	1、新建状态（New）：新创建了一个线程对象。
	2、就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。
	3、运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。
	4、阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。
	阻塞的情况分三种：
		(1)、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)
		(2)、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。
		(3)、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、
	join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）
	5、死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。
	
六、线程调度
	线程的调度
	1、调整线程优先级：Java线程有优先级，优先级高的线程会获得较多的运行机会。
		Java线程的优先级用整数表示，取值范围是1~10，Thread类有以下三个静态常量：
		static int MAX_PRIORITY
		          线程可以具有的最高优先级，取值为10。
		static int MIN_PRIORITY
		          线程可以具有的最低优先级，取值为1。
		static int NORM_PRIORITY
		          分配给线程的默认优先级，取值为5。
		Thread类的setPriority()和getPriority()方法分别用来设置和获取线程的优先级。
		每个线程都有默认的优先级。主线程的默认优先级为Thread.NORM_PRIORITY。
		线程的优先级有继承关系，比如A线程中创建了B线程，那么B将和A具有相同的优先级。
		JVM提供了10个线程优先级，但与常见的操作系统都不能很好的映射。如果希望程序能移植到各个操作系统中，应该仅仅使用Thread类有以下
	三个静态常量作为优先级，这样能保证同样的优先级采用了同样的调度方式。	 
	2、线程睡眠：Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，
	就转为就绪（Runnable）状态。sleep()平台移植性好。	 
	3、线程等待：Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法。
	这个两个唤醒方法也是Object类中的方法，行为等价于调用 wait(0) 一样。	 
	4、线程让步：Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。	 
	5、线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，
	当前线程再由阻塞转为就绪状态。 
	6、线程唤醒：Object类中的notify()方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。
	选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。类似的方法还有一个notifyAll()，唤醒在此对象监视器上等待的所有线程。
 	注意：Thread中suspend()和resume()两个方法在JDK1.5中已经废除，不再介绍。因为有死锁倾向。
	
七、常用函数说明
	①sleep(long millis): 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行)
	
	②join():指等待t线程终止。
		join是Thread类的一个方法，启动线程后直接调用，即join()的作用是：“等待该线程终止”，这里需要理解的就是该线程是指的
	主线程等待子线程的终止。也就是在子线程调用了join()方法后面的代码，只有等到子线程结束了才能执行。
		Thread t = new AThread(); t.start(); t.join(); 		
	为什么要用join()方法
		在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程
	处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。
	
 	③yield():暂停当前正在执行的线程对象，并执行其他线程。
        Thread.yield()方法作用是：暂停当前正在执行的线程对象，并执行其他线程。
         yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是
    让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。
 	结论：yield()从未导致线程转到等待/睡眠/阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。
 	
 	sleep()和yield()的区别
        sleep()和yield()的区别):sleep()使当前线程进入停滞状态，所以执行sleep()的线程在指定的时间内肯定不会被执行；
        yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。
        sleep()方法使当前运行中的线程睡眼一段时间，进入不可运行状态，这段时间的长短是由程序设定的，yield方法使当前线程让出CPU占有权，
    但让出的时间是不可设定的。
    	实际上，yield()方法对应了如下操作：先检测当前是否有相同优先级的线程处于同可运行状态，如有，则把CPU的占有权交给此线程，否则，
    继续运行原来的线程。所以yield()方法称为“退让”，它把运行机会让给了同等优先级的其他线程
        另外，sleep()方法允许较低优先级的线程获得运行机会，但yield()方法执行时，当前线程仍处在可运行状态，所以，不可能让出较低
    优先级的线程些时获得CPU占有权。在一个运行系统中，如果较高优先级的线程没有调用sleep()方法，又没有受到 I\O 阻塞，那么，
    较低优先级线程只能等待所有较高优先级的线程运行结束，才有机会运行。 
    
    ④setPriority(): 更改线程的优先级。
　　　	MIN_PRIORITY = 1
  　　   NORM_PRIORITY = 5
    	MAX_PRIORITY = 10
	用法：
	Thread4 t1 = new Thread4("t1");
	Thread4 t2 = new Thread4("t2");
	t1.setPriority(Thread.MAX_PRIORITY);
	t2.setPriority(Thread.MIN_PRIORITY);
	
	⑤interrupt():不要以为它是中断某个线程！它只是线线程发送一个中断信号，让线程在无限等待时（如死锁时）能抛出抛出，从而结束线程，
		但是如果你吃掉了这个异常，那么这个线程还是不会中断的！
	
	⑥wait():
		Obj.wait()，与Obj.notify()必须要与synchronized(Obj)一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作，
	从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){...}语句块内。从功能上来说wait就是说线程在获取对象锁后，
	主动释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。相应的notify()
	就是对对象锁的唤醒操作。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块
	执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行。这样就提供了在线程间同步、
	唤醒的操作。Thread.sleep()与Object.wait()二者都可以暂停当前线程，释放CPU控制权，主要的区别在于Object.wait()在释放CPU同时，
	释放了对象锁的控制。
	单单在概念上理解清楚了还不够，需要在实际的例子中进行测试才能更好的理解。对Object.wait()，Object.notify()的应用最经典的例子，
	应该是三线程打印ABC的问题了吧，这是一道比较经典的面试题，题目要求如下：
	建立三个线程，A线程打印10次A，B线程打印10次B,C线程打印10次C，要求线程同时运行，交替打印10次ABC。这个问题用Object的wait()，
	notify()就可以很方便的解决。代码如下：
	/** 
	 * wait用法 
	 * @author DreamSea  
	 * @time 2015.3.9  
	 */  
	package com.multithread.wait;  
	public class MyThreadPrinter2 implements Runnable {     
	        
	    private String name;     
	    private Object prev;     
	    private Object self;     
	    
	    private MyThreadPrinter2(String name, Object prev, Object self) {     
	        this.name = name;     
	        this.prev = prev;     
	        this.self = self;     
	    }     
	    
	    @Override    
	    public void run() {     
	        int count = 10;     
	        while (count > 0) {     
	            synchronized (prev) {     
	                synchronized (self) {     
	                    System.out.print(name);     
	                    count--;    
	                      
	                    self.notify();     
	                }     
	                try {     
	                    prev.wait();     
	                } catch (InterruptedException e) {     
	                    e.printStackTrace();     
	                }     
	            }     
	    
	        }     
	    }     
	    
	    public static void main(String[] args) throws Exception {     
	        Object a = new Object();     
	        Object b = new Object();     
	        Object c = new Object();     
	        MyThreadPrinter2 pa = new MyThreadPrinter2("A", c, a);     
	        MyThreadPrinter2 pb = new MyThreadPrinter2("B", a, b);     
	        MyThreadPrinter2 pc = new MyThreadPrinter2("C", b, c);     
	             
	             
	        new Thread(pa).start();  
	        Thread.sleep(100);  //确保按顺序A、B、C执行  
	        new Thread(pb).start();  
	        Thread.sleep(100);    
	        new Thread(pc).start();     
	        Thread.sleep(100);    
	        }     
	}    

	输出结果：
	ABCABCABCABCABCABCABCABCABCABC
	     先来解释一下其整体思路，从大的方向上来讲，该问题为三线程间的同步唤醒操作，主要的目的就是ThreadA->ThreadB->ThreadC->ThreadA
	循环执行三个线程。为了控制线程执行的顺序，那么就必须要确定唤醒、等待的顺序，所以每一个线程必须同时持有两个对象锁，才能继续执行。一个对象
	锁是prev，就是前一个线程所持有的对象锁。还有一个就是自身对象锁。主要的思想就是，为了控制执行的顺序，必须要先持有prev锁，也就前一个线程
	要释放自身对象锁，再去申请自身对象锁，两者兼备时打印，之后首先调用self.notify()释放自身对象锁，唤醒下一个等待线程，再调用prev.wait()
	释放prev对象锁，终止当前线程，等待循环结束后再次被唤醒。运行上述代码，可以发现三个线程循环打印ABC，共10次。程序运行的主要过程就是A线程
	最先运行，持有C,A对象锁，后释放A,C锁，唤醒B。线程B等待A锁，再申请B锁，后打印B，再释放B，A锁，唤醒C，线程C等待B锁，再申请C锁，后打印C，
	再释放C,B锁，唤醒A。看起来似乎没什么问题，但如果你仔细想一下，就会发现有问题，就是初始条件，三个线程按照A,B,C的顺序来启动，按照前面的
	思考，A唤醒B，B唤醒C，C再唤醒A。但是这种假设依赖于JVM中线程调度、执行的顺序。

	wait和sleep区别
		共同点： 
		1. 他们都是在多线程的环境下，都可以在程序的调用处阻塞指定的毫秒数，并返回。 
		2. wait()和sleep()都可以通过interrupt()方法 打断线程的暂停状态 ，从而使线程立刻抛出InterruptedException。 
		   如果线程A希望立即结束线程B，则可以对线程B对应的Thread实例调用interrupt方法。如果此刻线程B正在wait/sleep /join，
		   则线程B会立刻抛出InterruptedException，在catch() {} 中直接return即可安全地结束线程。 
		   需要注意的是，InterruptedException是线程自己从内部抛出的，并不是interrupt()方法抛出的。对某一线程调用 interrupt()时，
		   如果该线程正在执行普通的代码，那么该线程根本就不会抛出InterruptedException。但是，一旦该线程进入到 wait()/sleep()/join()后，
		   就会立刻抛出InterruptedException 。 
		不同点： 
		1. Thread类的方法：sleep(),yield()等 
		   Object的方法：wait()和notify()等 
		2. 每个对象都有一个锁来控制同步访问。Synchronized关键字可以和对象的锁交互，来实现线程的同步。 
		   sleep方法没有释放锁，而wait方法释放了锁，使得其他线程可以使用同步控制块或者方法。 
		3. wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用 
		4. sleep必须捕获异常，而wait，notify和notifyAll不需要捕获异常
		所以sleep()和wait()方法的最大区别是：
		　　　　sleep()睡眠时，保持对象锁，仍然占有该锁；
		　　　　而wait()睡眠时，释放对象锁。
		但是wait()和sleep()都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException但不建议使用该方法）。
		sleep()方法
			sleep()使当前线程进入停滞状态（阻塞当前线程），让出CUP的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定
		时间给其他线程执行的机会;
		　　 sleep()是Thread类的Static(静态)的方法；因此他不能改变对象的机锁，所以当在一个Synchronized块中调用Sleep()方法是，
		线程虽然休眠了，但是对象的机锁并木有被释放，其他线程无法访问这个对象（即使睡着也持有对象锁）。
		　　在sleep()休眠时间期满后，该线程不一定会立即执行，这是因为其它线程可能正在运行而且没有被调度为放弃执行，除非此线程具有更高的优先级。 
		wait()方法
			wait()方法是Object类里的方法；当一个线程执行到wait()方法时，它就进入到一个和该对象相关的等待池中，同时失去（释放）了对象
		的机锁（暂时失去机锁，wait(long timeout)超时时间到后还需要返还对象锁）；其他线程可以访问；
		　　wait()使用notify或者notifyAlll或者指定睡眠时间来唤醒当前等待池中的线程。
		　　wiat()必须放在synchronized block中，否则会在program runtime时扔出”java.lang.IllegalMonitorStateException“异常。
			    
八、常见线程名词解释
	主线程：JVM调用程序main()所产生的线程。
	当前线程：这个是容易混淆的概念。一般指通过Thread.currentThread()来获取的进程。
	后台线程：指为其他线程提供服务的线程，也称为守护线程。JVM的垃圾回收线程就是一个后台线程。用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束
	前台线程：是指接受后台线程服务的线程，其实前台后台线程是联系在一起，就像傀儡和幕后操纵者一样的关系。傀儡是前台线程、幕后操纵者是后台线程。由前台线程创建的线程默认也是前台线程。可以通过isDaemon()和setDaemon()方法来判断和设置一个线程是否为后台线程。
	线程类的一些常用方法： 
	
	　　sleep(): 强迫一个线程睡眠Ｎ毫秒。 
	　　isAlive(): 判断一个线程是否存活。 
	　　join(): 等待线程终止。 
	　　activeCount(): 程序中活跃的线程数。 
	　　enumerate(): 枚举程序中的线程。 
	    currentThread(): 得到当前线程。 
	　　isDaemon(): 一个线程是否为守护线程。 
	　　setDaemon(): 设置一个线程为守护线程。(用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束) 
	　　setName(): 为线程设置一个名称。 
	　　wait(): 强迫一个线程等待。 
	　　notify(): 通知一个线程继续运行。 
	　　setPriority(): 设置一个线程的优先级。

	
